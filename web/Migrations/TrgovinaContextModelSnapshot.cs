// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SeminarskaNaloga.Data;

#nullable disable

namespace web.Migrations
{
    [DbContext(typeof(TrgovinaContext))]
    partial class TrgovinaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SeminarskaNaloga.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Trgovina")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TrgovinaId")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("mail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("priimek")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("SeminarskaNaloga.Models.Artikel", b =>
                {
                    b.Property<int>("ArtikelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ArtikelId"), 1L, 1);

                    b.Property<int?>("TrgovinaId")
                        .HasColumnType("int");

                    b.Property<double>("cena")
                        .HasColumnType("float");

                    b.Property<string>("img")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lastnikId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("naziv")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("opis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("trgovina")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ArtikelId");

                    b.HasIndex("TrgovinaId");

                    b.HasIndex("lastnikId");

                    b.ToTable("Artikel", (string)null);
                });

            modelBuilder.Entity("SeminarskaNaloga.Models.ArtikelKosarice", b =>
                {
                    b.Property<int>("ArtikelKosariceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ArtikelKosariceId"), 1L, 1);

                    b.Property<int?>("ArtikelKosareArtikelId")
                        .HasColumnType("int");

                    b.Property<string>("KosaricaId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("kolicina")
                        .HasColumnType("int");

                    b.HasKey("ArtikelKosariceId");

                    b.HasIndex("ArtikelKosareArtikelId");

                    b.HasIndex("KosaricaId");

                    b.ToTable("ArtikelKosarice", (string)null);
                });

            modelBuilder.Entity("SeminarskaNaloga.Models.InfoONarocilu", b =>
                {
                    b.Property<int>("InfoONarociluId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InfoONarociluId"), 1L, 1);

                    b.Property<int>("ArtikelId")
                        .HasColumnType("int");

                    b.Property<double>("Cena")
                        .HasColumnType("float");

                    b.Property<int>("Kolicina")
                        .HasColumnType("int");

                    b.Property<int>("NarociloId")
                        .HasColumnType("int");

                    b.HasKey("InfoONarociluId");

                    b.HasIndex("ArtikelId");

                    b.HasIndex("NarociloId");

                    b.ToTable("InfoONarocilu", (string)null);
                });

            modelBuilder.Entity("SeminarskaNaloga.Models.Kosarica", b =>
                {
                    b.Property<string>("KosaricaId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("KosaricaId");

                    b.ToTable("Kosarica", (string)null);
                });

            modelBuilder.Entity("SeminarskaNaloga.Models.Narocilo", b =>
                {
                    b.Property<int>("NarociloId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NarociloId"), 1L, 1);

                    b.Property<DateTime>("datumNarocila")
                        .HasColumnType("datetime2");

                    b.Property<string>("enaslov")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("kraj")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("naslov")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("posta")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("priimek")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("telefon")
                        .HasColumnType("int");

                    b.Property<double>("vrednostNarocila")
                        .HasColumnType("float");

                    b.HasKey("NarociloId");

                    b.ToTable("Narocilo", (string)null);
                });

            modelBuilder.Entity("SeminarskaNaloga.Models.Trgovina", b =>
                {
                    b.Property<int>("TrgovinaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TrgovinaId"), 1L, 1);

                    b.Property<string>("ime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("img")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lastnik")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TrgovinaId");

                    b.ToTable("Trgovina", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SeminarskaNaloga.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SeminarskaNaloga.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SeminarskaNaloga.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SeminarskaNaloga.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SeminarskaNaloga.Models.Artikel", b =>
                {
                    b.HasOne("SeminarskaNaloga.Models.Trgovina", null)
                        .WithMany("Artikli")
                        .HasForeignKey("TrgovinaId");

                    b.HasOne("SeminarskaNaloga.Models.AppUser", "lastnik")
                        .WithMany()
                        .HasForeignKey("lastnikId");

                    b.Navigation("lastnik");
                });

            modelBuilder.Entity("SeminarskaNaloga.Models.ArtikelKosarice", b =>
                {
                    b.HasOne("SeminarskaNaloga.Models.Artikel", "ArtikelKosare")
                        .WithMany()
                        .HasForeignKey("ArtikelKosareArtikelId");

                    b.HasOne("SeminarskaNaloga.Models.Kosarica", null)
                        .WithMany("ArtikliKosarice")
                        .HasForeignKey("KosaricaId");

                    b.Navigation("ArtikelKosare");
                });

            modelBuilder.Entity("SeminarskaNaloga.Models.InfoONarocilu", b =>
                {
                    b.HasOne("SeminarskaNaloga.Models.Artikel", "Artikel")
                        .WithMany()
                        .HasForeignKey("ArtikelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SeminarskaNaloga.Models.Narocilo", "Narocilo")
                        .WithMany("VrsticeNarocila")
                        .HasForeignKey("NarociloId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artikel");

                    b.Navigation("Narocilo");
                });

            modelBuilder.Entity("SeminarskaNaloga.Models.Kosarica", b =>
                {
                    b.Navigation("ArtikliKosarice");
                });

            modelBuilder.Entity("SeminarskaNaloga.Models.Narocilo", b =>
                {
                    b.Navigation("VrsticeNarocila");
                });

            modelBuilder.Entity("SeminarskaNaloga.Models.Trgovina", b =>
                {
                    b.Navigation("Artikli");
                });
#pragma warning restore 612, 618
        }
    }
}
